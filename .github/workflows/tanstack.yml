# Workflow for building and deploying a TanStack + Vite site to GitHub Pages

name: Deploy TanStack site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            dist
          key: ${{ runner.os }}-tanstack-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-tanstack-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build site
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
        env:
          NODE_ENV: production
          VITE_DISABLE_SOURCEMAPS: true
      - name: Copy output files (avoiding symlinks)
        run: |
          mkdir -p ./gh-pages-deploy
          rsync -av --copy-links --copy-unsafe-links --exclude='*.map' --exclude='node_modules/' ./.output/ ./gh-pages-deploy/
          echo "Directory structure of deployment files:"
          find ./gh-pages-deploy -type f | sort
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: ./gh-pages-deploy
          if-no-files-found: warn
          include-hidden-files: true
          compression-level: 9
      - name: Check for symlinks in deploy directory
        run: |
          echo "Checking for symlinks in ./gh-pages-deploy"
          find ./gh-pages-deploy -type l
      - name: Remove any remaining symlinks
        run: |
          find ./gh-pages-deploy -type l -exec rm -f {} +

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
